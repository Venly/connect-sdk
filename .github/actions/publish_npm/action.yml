name: ðŸš€ Publish
description: "Publish To Npm"

inputs:
  npm_token:
    description: The npm Token
    required: true
  token:
    description: The Github PAT Token
    required: true
outputs:
  published_version:
    description: "Published Version from package.json"
    value: ${{ steps.publish.outputs.published_version }}

runs:
  using: "composite"
  steps:
    - name: ðŸš€ Publish to npm
      id: publish
      shell: bash
      env:
        NPM_KEY: ${{ inputs.npm_token }}
      run: |
        #!/bin/bash
        set -x

        # Get current version from package.json
        current_version=$(jq -r '.version' package.json)
        package_name=$(jq -r '.name' package.json)

        # Authenticate with npm using the token
        printf '//registry.npmjs.org/:_authToken=${NPM_KEY}\n@venly:registry=https://registry.npmjs.org/' > .npmrc

        # Check if version already exists
        if npm view ${package_name}@${current_version} version &>/dev/null; then
          echo "Version ${current_version} already exists in npm registry, skipping publish"
          echo "published_version=${current_version}" >> $GITHUB_ENV
          echo "published_version=${current_version}" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Publish the npm package and capture the output
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            npm publish --verbose || true
        else
            npm publish --tag $(echo "${{ github.ref }}" | sed 's|refs/heads/||') --verbose || true
        fi

        # Force push tags to handle existing tags
        git push -f --tags origin HEAD:${{ github.ref_name }} || true

        # Output the version
        echo "Published version: ${current_version}"
        echo "published_version=${current_version}" >> $GITHUB_ENV
        echo "published_version=${current_version}" >> $GITHUB_OUTPUT
